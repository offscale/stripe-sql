from sqlalchemy import JSON, Column, ForeignKey, Integer, String, Table

from stripe_openapi.charge import Charge

from . import metadata

RefundJson = Table(
    "refundjson",
    metadata,
    Column("amount", Integer, comment="Amount, in %s"),
    Column(
        "balance_transaction",
        BalanceTransaction,
        ForeignKey("BalanceTransaction"),
        comment="Balance transaction that describes the impact on your account balance",
        nullable=True,
    ),
    Column(
        "charge",
        Charge,
        ForeignKey("Charge"),
        comment="ID of the charge that was refunded",
        nullable=True,
    ),
    Column(
        "created",
        Integer,
        comment="Time at which the object was created. Measured in seconds since the Unix epoch",
    ),
    Column(
        "currency",
        String,
        comment="Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)",
    ),
    Column(
        "description",
        String,
        comment="An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)",
        nullable=True,
    ),
    Column(
        "failure_balance_transaction",
        BalanceTransaction,
        ForeignKey("BalanceTransaction"),
        comment="If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction",
        nullable=True,
    ),
    Column(
        "failure_reason",
        String,
        comment="If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request` or `unknown`",
        nullable=True,
    ),
    Column("id", String, comment="Unique identifier for the object", primary_key=True),
    Column(
        "instructions_email",
        String,
        comment="For payment methods without native refund support (e.g., Konbini, PromptPay), email for the customer to receive refund instructions",
        nullable=True,
    ),
    Column(
        "metadata",
        JSON,
        comment="Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format",
        nullable=True,
    ),
    Column(
        "next_action", RefundNextAction, ForeignKey("RefundNextAction"), nullable=True
    ),
    Column(
        "object",
        String,
        comment="String representing the object's type. Objects of the same type share the same value",
    ),
    Column(
        "payment_intent",
        PaymentIntent,
        ForeignKey("PaymentIntent"),
        comment="ID of the PaymentIntent that was refunded",
        nullable=True,
    ),
    Column(
        "reason",
        String,
        comment="Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`)",
        nullable=True,
    ),
    Column(
        "receipt_number",
        String,
        comment="This is the transaction number that appears on email receipts sent for this refund",
        nullable=True,
    ),
    Column(
        "source_transfer_reversal",
        TransferReversal,
        ForeignKey("TransferReversal"),
        comment="The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details",
        nullable=True,
    ),
    Column(
        "status",
        String,
        comment="Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details",
        nullable=True,
    ),
    Column(
        "transfer_reversal",
        TransferReversal,
        ForeignKey("TransferReversal"),
        comment="If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter",
        nullable=True,
    ),
)
__all__ = ["refund.json"]
